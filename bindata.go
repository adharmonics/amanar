// Code generated by go-bindata.
// sources:
// amanar_config_schema.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x4f\x6f\xdb\xc6\x13\xbd\xfb\x53\x0c\x88\xdf\x31\x50\x80\x1c\x73\x33\x9c\x5f\x5b\xb7\x2e\xea\x24\x76\x80\xa2\x08\x94\x15\x77\x28\x4e\xba\xdc\xa5\xf7\x8f\x15\xa1\xc8\x77\x2f\x66\x97\x14\x49\x91\x96\x19\x47\x51\xd2\x1c\x1c\x91\x1c\xce\xce\xbc\x79\x6f\x76\x96\xff\x9c\x01\x64\xe4\xb1\x72\xd9\x4b\xe0\x0b\x80\xcc\xe2\x5d\x20\x8b\x32\x7b\x09\x7f\xc5\x3b\x00\x59\x6e\x74\x41\xeb\x60\xc5\x4a\xa1\xcb\x9e\xb5\xb7\xef\x45\x50\x7e\x59\x0b\x5f\xee\xdf\xb3\x46\x61\x16\x6f\xbd\x4f\x4f\x32\xbf\xad\x31\x7b\x09\x99\x59\x7d\xc4\xdc\x37\xf6\x59\x6d\x4d\x8d\xd6\x13\x76\x01\x0c\xfd\x76\x77\x01\x32\x89\x2e\xb7\x54\x7b\x32\x9a\x5d\xdd\x94\x08\x6c\x04\x16\x6b\x8b\x0e\xb5\x27\xbd\x06\x5f\x22\x48\xe1\x85\xf3\xc6\x22\x90\x8e\x37\xde\xb1\xc7\x05\xdc\x94\xe4\x80\x1c\x70\x8a\xf7\x42\xa1\xf6\xe0\x0d\xfc\xef\xdd\xf9\xed\xd5\xcd\xf2\xfa\xfc\xe6\x97\xd6\xfe\xe2\xea\x12\x72\x53\x55\x42\x4b\xf8\x10\xc3\x01\x8b\x42\xf6\x4d\x9f\xe7\x16\xa5\x7b\xde\xdc\x79\xf3\xc7\xd5\xff\x3f\x2c\x76\x30\xf4\x12\x76\xde\x92\x5e\x67\xcd\x83\xcf\x53\x40\x3d\x96\x24\x1b\x8d\x93\xac\xd1\x56\xe4\x1c\x19\xed\xc0\x97\xc2\x83\xb0\x08\xce\x84\x75\x19\xb3\xda\xa5\xdd\xa1\xf1\x08\x00\x9c\xc3\x09\x01\x18\x92\x6a\x80\xc1\x24\x59\x1e\x26\x4c\x7c\x42\xda\xa3\x52\xf4\x71\x19\xd3\x35\xc1\xe6\x23\x9b\x9e\x67\x61\xad\xd8\xf6\x1c\x4f\x41\x7f\xae\x94\xd9\x38\xb8\x4c\x8e\x7f\x85\xce\x31\x04\x87\x56\x8b\x0a\x1d\x30\x40\xb5\x70\x6e\x63\xac\x74\x0c\xe6\x0a\x21\x2f\x85\x5e\xa3\x5c\xc0\xef\xc6\x79\xb6\x2d\x82\x82\xc2\x58\x78\x25\xbc\xf8\xd9\x52\x1d\xdf\x62\x77\x2b\xe1\xd0\xc1\x86\x7c\x49\xba\x5b\xe8\x56\x79\xaa\x84\xc7\xc5\x7e\x80\x43\xa9\x4e\xa4\x35\x02\xac\x79\x3e\x21\xea\x7e\xde\x4d\x24\xcb\x10\x48\x8e\x5e\x6e\x0c\x52\xe6\xcb\x82\x14\x26\x69\xee\x99\xbd\x1f\x2d\xfa\x60\xad\x0e\x79\x9d\xb2\x3c\x20\x7d\x6f\x86\xf5\x81\xa6\xf2\xc0\x1e\x99\xef\x18\x7f\x31\xe7\xfd\xb6\xa6\x5c\x28\xb5\x05\xfe\x8b\xa9\x00\x6f\x93\xf9\x42\x99\x5c\xa8\xc5\xa7\x4a\xed\x63\xbe\x07\xf0\x90\xcc\xdd\xbf\xcf\x13\xa8\x79\x1b\x9c\x47\xb9\x14\x75\xad\x28\x17\x1c\xfb\x34\x12\xe3\xfc\x2e\x8b\xa8\xc2\xdf\x70\x9b\x97\x82\x34\xa0\xf6\x96\xd0\xc1\xd6\x04\xd8\x88\xa4\xda\xdc\xa2\xf0\x08\x42\xb1\x30\xb7\x80\x9f\xc8\xf9\x67\xe0\x1b\x85\x07\xad\x31\x47\xe7\x84\xdd\x2e\xe0\x1c\x14\x39\x0f\xa6\x80\x22\x28\x15\x91\x8b\x5c\xed\x47\x16\xaf\x99\xf1\xc3\x95\xb9\x93\x70\x1e\xfc\xc3\xa2\x0c\x39\xc6\xe7\x3a\x54\x2b\xb4\xec\xb1\xdf\x86\x6a\x6b\xaa\xda\xbb\xa6\xcf\xc4\x02\xb9\xd2\x04\x25\x01\xb5\xe4\xd6\xb2\x10\x75\xfd\x00\xc2\x0f\x71\x7b\x66\x01\x26\x4b\x30\x12\xfc\xac\xba\x0d\xe5\x30\x9f\x90\x9d\x7e\x6f\x2f\x5f\x45\xbd\xb7\x7b\x11\x7b\x1b\xd4\x2e\xd4\x92\xf5\x0d\x7f\x9a\x00\xb9\xd0\x50\x90\x96\xa9\x74\x2b\xae\xa4\xa8\x48\xf7\xf7\xb2\x11\x4b\x13\xbd\x9f\x48\xd5\xb3\x43\xd7\xfd\xab\x01\x38\x5d\x83\xb5\x41\x2f\x77\xcd\x7b\x9a\xd5\x4f\xe9\xb3\xa9\x6b\x46\x1e\xee\x30\x13\x39\x73\x98\xa9\x2e\x79\xe7\x13\x6a\xdc\x2c\x6d\xd0\x30\x8c\xe6\x54\x6d\x13\xf5\x3d\x59\xa3\x2b\xd4\x7e\x79\x2f\x2c\xf1\x46\x36\xd5\x3d\xc7\x78\x2d\x0b\xa3\x24\xda\xe1\xe8\xd4\x07\xa8\x65\x60\x69\x9c\xff\xfa\x46\xfb\x48\x00\xf3\x18\x7e\x0e\x92\x2c\xe6\xde\xd8\x2d\xe3\xed\x45\xa2\xa8\x50\xea\x50\x2d\x9a\x1d\x31\x51\x9a\xb7\xc4\x5b\x17\x62\x0f\x66\x2a\x7b\x4c\x4d\x81\x24\x8a\xe7\x36\xe8\x8b\x61\x19\xe1\xcd\xd8\x5d\x25\xb6\xa0\x11\x65\xe3\xd7\x95\xc2\xa2\x84\x15\x16\x3c\xec\xad\x30\x37\x15\x07\x75\x4f\x8e\x56\xaa\x99\xfe\xc8\x41\xca\xf6\x88\xad\x7d\xb2\xf4\xf3\x3b\x45\xef\x75\x68\x5f\x6f\x27\xaf\x11\x86\x10\xb4\x44\x0b\x9b\x92\xf2\x72\xd8\x51\x72\xc3\x4d\x3e\x3a\x3e\x5a\x66\x43\xea\xcd\x4f\xa9\x9d\x88\x06\x03\xd1\xae\x09\xde\xbe\xb9\x82\x0d\x29\x05\x46\xab\x2d\x17\x2e\x35\x40\x09\x94\x36\x3a\x5e\x8c\x37\x13\xb6\x6b\x70\x98\xc4\xa8\x12\x3e\x2f\xb9\x47\x70\x55\x53\x5a\x27\xee\x82\x77\x01\x2d\x99\xe0\x5e\x1c\x7d\xce\x9c\xd9\xff\xe2\x24\x1f\x75\x23\xe0\x75\x13\x0c\xbc\x80\xb7\xaf\xaf\xc8\x77\xdc\x38\x55\x0f\xec\xe0\x70\x77\x8a\x3c\x3e\xde\xd2\xe2\xa6\xfa\xd5\x2d\x6d\x7a\xdd\x79\x74\xbd\x6e\x06\x47\x66\xd9\x1e\x6c\x0c\x6b\x12\x5a\x0f\xda\x88\xb8\x03\xf2\x2e\xda\x3d\x32\x55\x5e\xec\x44\xe9\x16\x29\xb6\x23\xf6\x9d\xa7\x8e\x26\x41\xd3\x5d\x40\xa0\xc8\xa2\x82\xd0\xee\x94\xb9\xcb\x73\x07\x41\x6f\x3c\xb9\x10\x9a\xc5\x5a\x98\xa0\x25\x4f\x26\xca\x98\xbf\xb9\xbf\x36\x12\x7d\x84\x73\x73\xf3\x7c\xa2\x12\x1d\xde\x05\x54\xcb\xda\x9a\xef\x25\x45\xc6\xf0\x6d\x8c\x02\xae\xad\x81\x9a\x87\xec\x93\x4d\x1f\xbd\xf4\xe3\xc2\xa7\x52\xde\xf4\xba\x5f\xae\xbc\xf8\x72\xa7\xb7\x1e\x8e\x5f\xa6\xb7\x9f\xc4\xbd\xb1\xe4\xd1\x2d\xa2\xc7\x1f\x59\x6b\xbd\x1c\x9f\xa0\xb6\x98\xde\x89\x35\x56\x1b\xe7\x29\xff\x6e\x02\xeb\xef\x75\xd7\x29\x94\xef\xb5\xd1\xb5\x48\x9c\x76\x9b\x9b\x5a\xf5\x88\x9b\x5c\x8b\xe9\x53\x77\xb8\x4e\x7b\x72\xf5\x23\x0b\xaf\xcd\xf3\xbf\xb7\xc7\x95\xa8\xd4\x61\xf5\x4d\x0b\x4c\xa4\xf2\xa5\x53\xd2\x1a\x35\xda\xf6\xb4\x25\x20\x3a\x85\xf4\x56\xfa\x72\xdc\x9c\xe7\x1c\xe0\xa7\xda\x58\xef\x78\x14\x9f\x9a\xbf\x5d\xff\xe4\x17\x3f\x03\xe1\xa6\x2f\xd8\x91\x18\x0f\xb6\x86\x6f\xa4\x54\x25\xf4\x3a\x88\xf5\xe4\x51\xbc\x3d\xa5\x1c\x3c\xaf\xb7\xa7\x97\x83\x46\x09\xbe\x23\x7d\x09\xdd\x85\x3c\x9f\xec\xfd\x22\x72\x35\x5a\x17\x5c\xf2\xb6\xde\xb1\x44\x83\x6a\x93\x9e\x47\xe0\x49\x1b\xd4\xa1\x62\xc8\xb3\x95\x70\x65\xf6\x7e\x96\x96\xfb\x30\x7d\xe9\xa7\xdd\xfd\xe0\x9b\x4f\x89\x03\x42\x7b\x73\xc4\xe9\x7a\xcc\x8e\xf9\x21\xc7\xb3\xaf\x29\x1e\x3e\xba\x46\xa1\x35\x29\x34\x2a\x8a\xc6\xed\xa2\xc7\x4b\x63\xcc\xdf\x13\xa4\xd1\x2e\xfa\xcd\xfb\xe3\xd9\xfe\xaf\xf4\x3f\xff\x8d\x60\xec\x7f\xf1\xfd\x7c\xf6\x6f\x00\x00\x00\xff\xff\x43\x84\x0e\xf9\xe6\x1c\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 7398, mode: os.FileMode(420), modTime: time.Unix(1536762970, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": &bintree{amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

