// Code generated by go-bindata.
// sources:
// amanar_config_schema.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\x4f\x6f\xdb\x3a\x12\xbf\xe7\x53\x0c\x84\x3d\x06\x2e\xb6\xc7\xdc\x82\x74\xbb\x9b\x6e\x76\x9b\x36\x49\x81\xc5\xa2\x70\x69\x71\x64\xb1\x8f\x22\x15\xfe\x89\x63\x3c\xe4\xbb\x3f\x0c\x49\x59\x52\x24\x3b\x76\xda\xf4\xd9\x79\x39\x24\x12\x39\x1c\x92\xbf\x99\xf9\xcd\x90\xca\xef\x47\x00\x99\x5b\xd6\x98\x9d\x40\xc6\x8c\x61\xcb\xec\x98\x9a\x84\xc3\xca\x66\x27\x40\xfd\x1d\x09\x3d\xfb\x8e\xb9\x0b\x22\x00\x19\xe3\x5c\x38\xa1\x15\x93\x97\x46\xd7\x68\x9c\x40\x1a\x53\x30\x69\x31\x89\x18\xbc\xf5\xc2\x20\xcf\x4e\xe0\xff\xd9\x1d\xf3\xd2\x4d\x19\xe7\x06\xad\xcd\x8e\x21\x35\xe4\x5a\x15\x62\xee\x0d\x23\x5d\xd9\xd7\x34\xb2\xee\xaa\x8c\xcb\x00\x78\xa4\xa2\xed\x00\xc8\x38\xda\xdc\x88\x3a\x28\x39\x81\xec\xba\x44\x48\x72\xe0\x34\x30\xa8\x99\x71\x22\xf7\x92\x19\x08\x5a\x26\xf0\x85\xfe\x34\x42\x68\xc1\x5b\xcf\xa4\x5c\x02\x17\x45\x81\x06\x0a\x6d\xd2\x23\x2a\x07\xa8\xee\x84\xd1\xaa\x42\xe5\xec\x04\xde\x6b\x03\x78\xcf\xaa\x5a\xe2\x31\x2c\x10\x2a\xb6\x84\x92\xdd\x21\x68\x85\x51\xfd\x6a\x72\x52\x53\x1b\xcd\x7d\x4e\x4b\x03\xa6\x38\x30\xa5\x5d\x99\x66\xb0\x8e\xcd\x85\x9a\x4f\x12\xa8\x3d\xb8\xad\x33\x42\xcd\xbb\x3d\x85\x36\x15\x73\xd4\xe7\x8d\xe8\x76\x54\x42\x5d\xa0\x9a\xbb\x32\x3b\x81\xbf\xa7\xe6\x87\xe3\x3e\x6c\x7d\xa0\x7b\xe0\x0d\x5d\x20\x75\xf4\x1d\xe1\x91\x74\xcf\x1d\x52\xdf\xd3\x4e\x31\x6e\xaf\x53\x90\xc2\x3a\xd0\x45\x82\xcf\x68\x89\x36\xa0\x55\x33\x57\xc6\xa7\xde\x06\x40\x87\xb1\x11\x60\xed\x5d\xed\x1d\x19\x9a\x33\xc7\xc0\x6a\x6f\x72\xb4\xb0\x10\xae\x14\x6a\xc4\xf8\x5d\x73\x4e\xfa\x1b\xe8\xba\x6c\xa7\x1d\x20\x5b\x4d\x3f\x93\x68\x7b\x83\x56\x10\xd3\x5a\xc7\x7b\x68\x3f\x59\xa7\xe3\x6b\x6f\xd2\x51\x6f\x1f\x6a\x7e\xdc\x37\xee\xf6\x24\x0a\x06\x6b\x83\x16\x95\x13\x6a\x0e\xae\xc4\x00\x8c\x75\xda\x20\x08\x15\x1a\xbe\xc4\x28\xb8\x2e\x85\x05\x61\x81\xb6\x7d\xc7\x24\xf9\xba\xd3\xf0\xb7\x2f\xa7\x37\x17\xd7\xd3\xcb\xd3\xeb\x7f\x35\xf2\x67\x17\xe7\x90\xeb\xaa\x22\x4b\x7c\x4b\x46\x42\xc6\xbb\xa2\x6f\x72\x83\xdc\xbe\x49\x2d\x9f\x3f\x5e\xfc\xe3\xdb\xe4\x11\x1c\x9b\xdc\x7b\x83\x2f\xc7\x9f\x87\xf5\xd0\x6e\x07\x0d\x89\x0e\xa1\xa9\xd1\x54\xc2\xda\xe0\x4d\xae\x64\x0e\x98\x41\xf2\xa1\x79\x19\xb0\x58\x81\xd5\x62\xf8\x04\x6c\xb4\xf3\x3d\x86\xad\xef\xc8\x23\xc8\x6d\x08\x70\xd8\x25\xc8\xe1\x09\xdf\x0e\xfd\x42\x39\x94\x52\x7c\x9f\x06\x74\x63\xe4\x8e\x4a\x6e\xe0\xa9\xf5\x56\x3f\x95\x52\x2f\x2c\x9c\xc7\x49\x3e\x40\x3b\x09\x78\x8b\x46\xb1\x6a\x45\x33\xd6\x2e\xb4\xe1\x21\x5d\xcc\x10\xf2\x92\xa9\x39\xf2\x09\xfc\x47\x5b\x47\xb2\x85\x97\x81\x6b\xde\x31\xc7\xfe\x69\x44\x1d\x46\x91\xba\x19\xb3\x2d\xd7\xac\x26\xba\x91\x4e\x54\xcc\xe1\xd0\x92\xb0\x8e\x58\xb7\xb7\xc0\x33\xec\x90\x86\xac\xa5\xb7\x2e\x84\x69\x53\x53\xef\x05\x5f\x33\x77\x12\x8b\x50\x4e\x0b\x21\x31\x52\xd4\xa8\xf0\xd7\x35\x8b\x79\xc2\x35\x36\xcd\xb3\x5e\x7e\x03\x29\x3a\xdd\x77\x84\x55\xa2\x20\xbd\x14\xd3\x18\x9e\x28\xae\xdd\xb2\x16\x79\x28\x07\xe8\x37\x46\x4b\x5f\x45\xf1\x89\xd4\x39\x93\x93\xfb\x4a\x8e\x1b\x37\xad\xe2\x89\x80\xed\x48\xae\x0f\xdd\xf6\xe7\x61\xad\x1d\x9c\xf1\xd6\x21\x9f\xb2\xba\x96\x22\x0f\xc9\x71\x13\x9e\x43\x7c\xce\x8b\xc0\x54\xff\xc6\x65\x5e\x32\xa1\x00\x95\x33\x02\x2d\x2c\xb5\x87\x05\x8b\xcc\x96\x1b\x64\x0e\x81\x49\x22\xaf\x25\xe0\xbd\xb0\xee\x18\x5c\x62\x41\xaf\x14\xe6\x68\x2d\x33\xcb\x09\xb4\xa9\xbc\xf0\x52\xa6\xfc\x4d\x35\x58\x67\x7d\xe1\x9d\x42\xb3\x3f\x33\xb1\x2d\xed\x86\x1e\x0c\x72\x9f\x63\xe8\x57\xbe\x9a\xa1\x21\x8d\x5d\xaa\xae\x8d\xae\x6a\xaa\xc6\x02\x17\x07\x03\xdb\x52\x7b\xc9\x01\x15\x27\xfa\x9d\xb0\xba\xde\x68\xa1\xcd\x41\xb8\xab\x19\xb7\x34\xe4\x06\x53\x0e\x18\x6e\x67\x5f\xe8\x87\xee\xae\x41\xd2\x92\xd7\xcd\xf9\xbb\x40\x76\x4d\xe5\x40\x3a\x7b\xfe\xe0\x6b\x4e\xe4\x06\xff\xd3\x1e\x72\xa6\xa0\x10\x8a\x47\x77\x98\x2d\x43\x69\x2c\x54\xb7\xf2\x18\x44\x4e\x0c\xb9\x5f\x18\x3e\xa3\xed\x63\xad\xc3\xb6\x11\xb8\xdb\xac\x65\xbc\xea\x57\xd6\x3f\x3f\x79\xc5\x54\x64\x9b\xf2\x36\xd8\x82\xe5\x14\x6f\x14\x96\x9c\x2a\x19\x26\x87\x19\xc8\x78\xd5\x2f\x99\xed\x01\xe6\xa2\x4e\xa1\x3e\xbd\x63\x46\x50\xcd\xb2\x3e\x25\x0d\x8d\x31\x2d\xb4\xe4\x68\xc6\x2a\xf3\x2e\xee\x4d\xd8\x94\xda\xba\x97\xc8\x61\x4f\x2c\x6c\x97\x40\x3d\x05\x2e\x0c\xe6\x4e\x9b\x25\x99\xd7\xb1\x18\x69\x4c\xca\x4d\xa6\x4f\x55\x4d\x8c\x4c\x2a\x6b\x6e\xd2\x69\x97\x22\xd2\x61\xe4\x4b\xc1\x91\xbd\x31\x5e\x9d\xf5\xbd\x06\x3e\x0f\xd5\xd1\x89\x57\x21\xf2\xa4\xd7\x96\xcc\x20\x87\x19\x16\x74\xc2\x98\x61\xae\x2b\x5a\xd4\x9d\xb0\x62\x26\xd3\x91\x43\xd0\x59\x8d\xf6\xbc\x17\x59\x73\xd4\xb1\x76\x25\xcc\x8e\x12\x68\x94\x34\x85\xff\xc0\x06\xe0\x15\x47\x03\x8b\x52\xe4\x65\x9f\x58\x73\x4d\xf9\x33\x28\xde\x03\x64\xfa\xc1\xb0\x2b\x24\x4d\x55\xdd\x2b\xaa\x57\xb9\xe4\xe6\xf3\x05\x2c\x84\x94\xa0\x95\x5c\x92\xe3\xc4\x3c\xc2\x41\xc4\x1a\x84\xa6\xa4\x3c\x4f\x72\x09\xc7\x51\x8c\x2b\xe6\xf2\x92\x28\x91\xbc\x2a\x02\x72\xc0\xc9\xe4\xd6\xa3\x11\xda\xdb\xb7\x2f\x7a\x06\xda\x32\x8d\x84\x03\x6e\xe0\x03\x06\x9f\xd2\xc2\xe0\x2d\x5c\x7d\xba\x10\xae\xf5\xd9\x03\x4c\x25\x2d\xca\xf6\x56\x0a\x87\xdb\xe6\x84\x50\x4a\xbd\x40\x4e\x18\x5f\xcf\x2e\xf1\x76\x99\x0e\x35\x14\x26\x8f\xec\x43\xf6\x8b\x4c\xd3\xb1\x61\x30\xad\x05\xe1\x6c\x90\x7b\xe2\xc4\x73\xb6\x62\x25\x3b\x89\x2b\xdc\x0b\xe2\xfe\xb1\x12\xd7\x2b\x71\xeb\x11\x44\x70\xf7\x42\xa4\x5b\x58\x02\x70\x85\xd3\x0a\xc2\x4e\x99\x7b\xc6\x14\xb1\x55\xa1\xbd\xe2\x54\xe1\x4a\xad\x7f\xa3\x04\x97\x38\x6a\xab\xe0\x78\x19\x9c\x7e\x32\x15\x59\xbc\xf5\x28\xa7\xb5\xd1\xfb\xc0\x45\x64\x9b\xab\xb0\x22\xb8\x34\x1a\x6a\x3a\x58\x1e\x62\x15\xdb\x41\x35\xec\xe1\xcf\xa6\x9e\xf1\xf5\x3c\x97\x7a\x82\x8a\x96\x70\x3a\x06\xdb\x8d\x70\xde\xb3\x3b\x6d\x84\x43\x3b\x09\x1a\x5f\x33\xd9\x74\x30\x7a\x06\xdd\x04\x78\x0e\x98\x64\x6a\x6d\x9d\xc8\xf7\x82\x61\xba\xd5\xce\x65\x5c\xd6\x2b\x28\x75\x1a\x80\xf7\xa3\xd0\x19\x5b\xcd\x4f\x2f\x73\x1a\xe3\x3d\xb7\xc6\x69\xc9\x87\xcf\x5e\x33\xf3\x34\x38\xfd\xb5\xab\x9c\x12\xa5\xdc\x86\x7e\xc6\xb9\x85\x45\x87\x8a\x57\x1f\x73\x54\x68\x9a\x2b\x14\x06\x41\x35\xc4\x51\xf1\x6b\x62\xba\xa4\xb1\x80\xf7\xb5\x36\xce\xd2\xf9\x76\xec\x50\x6b\xbb\xd7\x39\xe1\xda\x1b\x17\x5d\xae\x5a\xc3\x43\x5b\x30\xe4\x3e\x53\x55\x73\x5f\xb0\xc5\xed\x5e\x73\x9b\xb0\x85\x28\xd9\xe7\xa5\xbe\x47\xad\x74\x3f\xef\x1b\x54\x89\x7d\x1f\x49\xdf\x2c\x7a\x9e\xe4\xf4\x5e\x1c\xb5\x86\xb6\xd9\x75\xcb\xe1\x26\x48\x17\xeb\x2f\x72\x42\x84\x24\x08\x92\xfb\x07\xe1\x66\xea\x7d\x80\x61\xe8\x77\xbf\x0c\x86\x66\xea\xc3\xa5\xda\xef\x56\xab\x1f\x61\xda\x0f\x57\x1f\xff\x3b\x4e\xb7\x1d\xb6\x5c\xf3\x29\xff\x75\x32\x66\x9b\xd4\x0f\x95\xff\x5a\x9b\xee\x31\xf9\x75\x60\x7e\x7e\xb8\x0b\xdb\xf9\x7f\xb6\xe0\x9c\xf1\x35\x40\x51\x33\x61\x92\x57\x7b\x8b\x1c\x18\xb9\xef\xb0\x66\x13\x36\x02\x16\x9d\xed\x50\xaa\xae\xa3\x4d\xef\xdd\xb7\xf6\xb9\x79\x8a\x7f\xe9\xf7\xc3\xd1\xc3\xd1\x1f\x01\x00\x00\xff\xff\x8e\x7c\x16\xcc\xa4\x2a\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 10916, mode: os.FileMode(420), modTime: time.Unix(1536811020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": &bintree{amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

