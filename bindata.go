// Code generated by go-bindata.
// sources:
// amanar_config_schema.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\xdf\x6f\xdb\x36\x10\x7e\xcf\x5f\x71\x10\xf6\x58\xb8\x58\x1f\xfb\x16\xa4\xfb\x91\x2d\xc3\xd2\x36\x29\x30\x0c\x85\x4b\x8b\x27\xeb\x3a\x8a\x54\xf8\x23\xae\x31\xf4\x7f\x1f\x8e\x94\x2c\xc9\x52\x6c\x37\x4d\x9d\x74\x7d\x48\x2d\xea\x74\xe4\x7d\x77\xdf\x77\x24\xff\x3d\x01\xc8\xc8\x63\xe5\xb2\x97\xc0\x0f\x00\x99\xc5\x9b\x40\x16\x65\xf6\x12\xfe\x8e\x23\x00\x59\x6e\x74\x41\xcb\x60\xc5\x42\xa1\xcb\x9e\xb5\xc3\xb7\x22\x28\x3f\xaf\x85\x2f\xb7\xc7\xac\x51\x98\xc5\xa1\xf7\xe9\x4d\xe6\xd7\x35\x66\x2f\x21\x33\x8b\x8f\x98\xfb\xc6\x3e\xab\xad\xa9\xd1\x7a\xc2\x6e\x01\x43\xbf\xdd\x28\x40\x26\xd1\xe5\x96\x6a\x4f\x46\xb3\xab\xab\x12\x81\x8d\xc0\x62\x6d\xd1\xa1\xf6\xa4\x97\xe0\x4b\x04\x29\xbc\x70\xde\x58\x04\xd2\x71\xe0\x1d\x7b\x9c\xc1\x55\x49\x0e\xc8\x01\x87\x78\x2b\x14\x6a\x0f\xde\xc0\x0f\xef\x4e\xaf\x2f\xae\xe6\x97\xa7\x57\xbf\xb6\xf6\x67\x17\xe7\x90\x9b\xaa\x12\x5a\xc2\x87\xb8\x1c\xb0\x28\x64\xdf\xf4\x79\x6e\x51\xba\xe7\xcd\xc8\x9b\x3f\x2f\x7e\xfa\x30\xdb\xc0\xd0\x0b\xd8\x79\x4b\x7a\xd9\x7f\x53\x91\xbe\x40\xbd\x8c\xd1\xfd\xd8\x0c\x7f\x9e\x02\x70\x5f\xf0\x6c\x34\x0e\xbe\x46\x5b\x91\x73\x64\xb4\x03\x5f\x0a\x0f\xc2\x22\x38\x13\x96\x65\x8c\x76\x03\x47\x87\xd2\x1e\x60\x38\xb6\x27\x00\xcc\xb0\x08\x07\xd8\x4c\x16\xd7\xdd\x05\x16\xdf\x90\xf6\xa8\x14\x7d\x9c\x47\x18\x4c\xb0\xf9\xc8\xa6\xe7\x59\x58\x2b\xd6\x3d\xc7\x53\x29\x39\x55\xca\xac\x1c\x9c\x27\xc7\xbf\x41\xe7\x18\x82\x43\xab\x45\x85\x0e\x18\xb8\x5a\x38\xb7\x32\x56\x3a\x06\x79\x81\x90\x97\x42\x2f\x51\xce\xe0\x0f\xe3\x3c\xdb\x16\x41\x41\x61\x2c\xbc\x12\x5e\xfc\x62\xa9\x8e\x5f\xb1\xbb\x85\x70\xe8\x60\x45\xbe\x24\xdd\x4d\x74\xad\x3c\x55\xc2\xe3\x6c\x7b\x81\x43\x6a\x4f\x84\x35\x02\xac\x79\x3f\x21\x02\xfd\xb8\x9b\x95\xcc\x43\x20\x39\xfa\xb8\x31\x48\x91\xcf\x0b\x52\x98\xa8\xbc\x65\xf6\x7e\x34\xe9\x9d\xb9\xda\xe5\x75\xca\x72\x87\x54\x78\x33\xcc\x0f\x34\x99\x07\xf6\xc8\x3c\xc0\xf8\x8b\xb9\xe0\xd7\x35\xe5\x42\xa9\x35\xf0\x5f\x4c\x09\x78\x9b\xcc\x67\xca\xe4\x42\xcd\x3e\x55\x6a\x1b\xf3\x2d\x80\x47\x45\xde\xb3\x99\x2a\xf7\xee\xdf\xe7\x09\x5c\xbd\x0d\xce\xa3\x9c\x8b\xba\x56\x94\x0b\x8e\x6e\x1a\xab\x31\x02\xe7\x45\xe4\xef\xef\xb8\xce\x4b\x41\x1a\x50\x7b\x4b\xe8\x60\x6d\x02\xac\x44\xe2\x7b\x6e\x51\x78\x04\xa1\x98\xd2\x6b\xc0\x4f\xe4\xfc\x33\xf0\x8d\x36\x04\xad\x31\x47\xe7\x84\x5d\xcf\xe0\x14\x14\x39\x0f\xa6\x80\x22\x28\x15\xb1\x8d\xd5\xdc\x5f\x59\x7c\x66\x4e\x0c\x67\x66\x0d\xe2\x38\xf8\x87\x45\x19\x72\x8c\xef\x75\xa8\x16\x68\xd9\x63\x5f\xc0\x6a\x6b\xaa\xda\xbb\x46\xa1\x62\x0a\x5d\x69\x82\x92\x80\x5a\xb2\x28\xcd\x44\x5d\xdf\x91\x83\xbb\xaa\xff\xf0\x14\xed\x4d\xd2\x64\x9a\x46\xb2\x71\x50\x6e\x87\xa4\x3a\xbc\xac\x3b\x15\xb8\x3e\x7f\x15\x55\xa3\xed\x80\xec\x6d\x90\xdf\x50\x4b\x56\x09\xf8\xcb\x04\xc8\x85\x86\x82\xb4\x4c\xe9\x5d\x70\xb6\x45\x45\xba\xdf\x41\x47\xb5\x9e\x48\xf2\xcd\x0a\xfe\x64\xd7\x73\xff\x69\x00\x5f\x27\xe4\x36\xe8\xf9\xa6\x49\x4c\x73\xe3\x3e\x7a\x9e\xd4\x39\x56\xf3\x06\x55\x91\x33\x13\x98\x30\x92\x3b\xaf\x50\x63\x51\xb6\x41\xc3\x70\x35\xc7\x92\x67\xd4\xb7\x64\x8d\xae\x50\xfb\xf9\xad\xb0\xc4\x0d\x73\x4a\xa5\xc7\x78\xcd\x0b\xa3\x24\xda\xe1\x96\xae\x0f\x50\x5b\xa3\xa5\x71\xfe\xeb\x05\x7d\xcf\x02\x0e\xe3\xc0\x29\x48\xb2\x98\x7b\x63\xd7\x8c\xb7\x17\xa9\x88\x85\x52\xbb\x72\xd1\x74\xde\x54\xf4\xdc\x7a\xaf\x5d\x88\x5a\xcf\xc5\xee\x31\x49\x0b\x49\x14\xcf\x6d\xd0\x67\xc3\x34\xc2\x9b\xb1\xbb\x4a\xac\x41\x23\xca\xc6\xaf\x2b\x85\x45\x09\x0b\x2c\x78\x13\xba\xc0\xdc\x54\xbc\xa8\x5b\x72\xb4\x50\xcd\xae\x94\x1c\xa4\x68\x8f\xda\x42\x26\x8b\xe3\x70\xb5\xe9\x7d\x0e\xed\xe7\xed\xde\x70\x84\x32\x04\x2d\xd1\xc2\xaa\xa4\xbc\x1c\xaa\x52\x6e\xb8\x99\x44\xc7\x47\x8c\x7d\x58\xbe\x87\x07\xdd\xee\xde\x06\x9b\xb7\x8d\xd4\x5e\xbf\xb9\x80\x15\x29\x05\x46\xab\x35\x27\x3f\xc9\xac\x04\x4a\x2d\x97\x27\xe3\xb6\xc6\x76\x0d\x52\x93\x28\x56\xc2\xe7\x25\xeb\x0c\x57\x46\x0a\xfc\xc9\x69\xed\x4d\x40\x4b\x26\xb8\x17\x0f\xbe\x6b\x3e\x50\x65\xe3\x79\x25\xb2\x53\xc0\xeb\x66\x31\xf0\x02\xde\xbe\xbe\x20\xdf\xd5\xd7\xb1\x94\xb6\x83\xc3\xdd\x28\xf2\xb8\x5f\x38\x63\x73\xff\x6a\xe1\x9c\x9e\xf7\xb0\x82\xbe\x6c\xb6\xc1\x5c\x87\x5b\xb0\x31\xac\x89\xac\x3d\x68\x23\xe2\x0e\xc8\xbb\x68\xb7\x67\x8f\x7c\xb6\x21\xb6\x9b\xa5\xb5\x1d\x55\xdd\xee\xbb\x89\x0a\x9a\x6e\x02\x02\xc5\x3a\x2b\x08\xed\x86\xdd\x1b\x24\x36\x20\xf5\x36\x52\x67\x42\x33\xe1\x0b\x13\xb4\xe4\x3d\x94\x32\xe6\x1f\xd6\xf9\x86\xe6\x7b\xaa\xf2\xe1\x90\xb8\x27\x9b\x1d\xde\x04\x54\xf3\xda\x9a\xc7\xa2\x33\xa3\xfc\x36\xae\x02\x2e\xad\x81\x9a\x0f\x15\x47\xdb\x27\xf5\xc2\x8f\x13\x1f\x8b\xbd\xd3\xf3\x7e\x39\x7b\xe3\xc7\x1d\x67\x7b\x38\x7e\x19\x67\x7f\x16\xb7\xc6\x92\x47\x37\x8b\x1e\xbf\x6f\xbe\xf6\x50\xb8\x07\x63\x23\x00\x4f\x8e\xa7\xb5\x71\x9e\xf2\x47\x23\x69\xbf\xe7\x5e\xa6\xa5\x3c\x56\xc3\x6d\x91\x38\x6e\xbb\x9d\x9a\xf5\x01\x9b\x6d\x8b\xe9\x7d\x3b\x6d\xc7\x5f\xb9\xf8\xbe\xc9\xdb\x22\xf1\x7f\xec\xb5\x25\x2a\xb5\x9b\xc1\xd3\x24\x15\xa9\x04\xd2\xb9\x72\x89\x1a\x6d\x7b\x3e\x15\x10\x9d\x42\xfa\x2a\xdd\xf5\x37\x27\x60\x07\xf8\xa9\x36\xd6\x3b\x3e\x78\x4c\x9d\x36\x5c\xff\xac\x1c\xaf\xdf\x70\xd5\x27\xfd\x88\xd0\x3b\xe5\xe5\x1b\xb1\x5d\x09\xbd\x0c\x62\x39\x79\x79\xd1\x9e\xc9\x76\xde\x70\xb4\x67\xb5\x9d\x46\x09\xbe\x07\xba\xa3\xde\x2c\xf9\x70\x3a\xf4\x93\xc8\xd9\x68\x5d\x70\xca\xdb\x7c\xc7\x14\x0d\xb2\x4d\xfa\x8e\x12\x47\x1d\x2a\x86\x33\x5b\x08\x57\x66\xef\x0f\x62\x72\x1f\x82\x2f\xbd\x50\xdf\x5e\x58\x73\x3d\x3b\x28\x56\x6f\x8e\x7a\x0a\x18\xd7\xc6\xe1\x41\xc5\x73\xbe\x29\xee\x3e\xa6\x47\x9a\x35\x41\x36\x1c\x8a\xc6\xed\xa4\xc7\x0c\x74\x5c\xdf\x47\x08\xb4\x9d\xf4\x09\x28\xec\xc9\xf6\xaf\xf4\x3f\xff\x8d\x70\x6d\xdf\xc3\x7f\x3e\xf9\x2f\x00\x00\xff\xff\x6d\x0c\xc6\x18\xf2\x1e\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 7922, mode: os.FileMode(420), modTime: time.Unix(1536767754, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": &bintree{amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

