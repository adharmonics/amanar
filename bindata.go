// Code generated by go-bindata.
// sources:
// amanar_config_schema.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4b\x6f\xdb\x46\x10\xbe\xe7\x57\x0c\x84\x1e\x03\x19\xc8\xd1\x37\xc3\xe9\xc3\xad\x8b\x3a\x7e\x04\x28\x8a\x40\x59\x71\x87\xe6\xa4\xcb\x5d\x7a\x1f\x52\x88\xc2\xff\xbd\x98\x25\xc5\x87\x45\x49\xf4\x23\x96\xe1\xc4\x07\x43\xe4\x0e\x67\x77\xbe\x99\xef\x9b\xd9\xff\xde\x00\x00\x4c\xc8\x63\xee\x26\x87\x50\x3d\xc6\x57\x16\x6f\x02\x59\x94\x93\x43\xf8\xa7\x79\x1b\x57\x12\xa3\x53\xba\x0e\x56\xcc\x15\xba\xc9\xdb\xfe\xe2\x42\x04\xe5\x67\x85\xf0\xd9\xf0\x8a\x35\x0a\x27\xcd\xc2\xa7\xd6\x66\xe2\xcb\x02\x27\x87\x30\x31\xf3\x2f\x98\xf8\xce\xd7\x93\xc2\x9a\x02\xad\x27\xec\x1f\xf1\xee\x7e\x77\xd7\xe2\xba\x44\x97\x58\x2a\x3c\x19\xcd\xce\x2f\x33\x04\x36\x06\x8b\x85\x45\x87\xda\x93\xbe\x06\x9f\x21\x48\xe1\x85\xf3\xc6\x22\x90\x8e\x2f\x3e\xb2\xe7\x29\x5c\x66\xe4\x80\x1c\x30\x1c\x0b\xa1\x50\x7b\xf0\x06\x7e\xfa\x78\x74\x75\x7a\x39\x3b\x3b\xba\xfc\x6d\x65\x7f\x7c\x7a\x02\x89\xc9\x73\xa1\x25\x7c\x8e\xc7\x02\x8b\x42\x76\x4d\x0f\x12\x8b\xd2\x1d\xd4\x6f\xce\xff\x3a\xfd\xf9\xf3\xf4\x0e\x4c\x3d\x28\x9c\xb7\xa4\xaf\x27\x3d\x83\xdb\xcd\xb0\x8e\x05\x80\x8d\xd7\x01\x28\xd0\xe6\xe4\x1c\x19\xed\xc0\x67\xc2\x83\xb0\x08\xce\x84\xeb\x2c\x46\xdc\x40\xd2\x22\xb5\x03\x1c\x8e\x6f\xcf\xe0\xf4\x4b\x75\x10\x9f\x8d\x65\x37\xa6\xfc\x1a\x1b\xd2\x1e\x95\xa2\x2f\xb3\x08\x8e\x09\x36\xd9\x62\x3d\x94\x97\x23\xa5\xcc\xd2\xc1\x49\xe5\xe7\x77\x68\xfd\x40\x70\x68\xb5\xc8\xd1\x01\xa3\x57\x08\xe7\x96\xc6\x4a\xc7\x48\xcf\x11\x92\x4c\xe8\x6b\x94\x53\xf8\xd3\x38\xcf\xb6\x69\x50\x90\x1a\x0b\xef\x85\x17\xbf\x5a\x2a\xe2\x57\xec\x6e\x2e\x1c\x3a\x58\x92\xcf\x48\xb7\x1b\x5d\x29\x4f\xb9\xf0\x38\x84\x75\x1b\xde\x9a\x3e\x0c\x9a\x6d\xd4\x8c\x61\x04\xea\x33\xcd\x42\x20\xb9\x65\xf7\xde\x07\x15\x26\xb3\x94\x14\x56\xac\xdf\xfa\xd9\xa7\xed\x5e\x77\x27\xbf\x67\x3d\xa2\x10\x76\x9f\x77\xcc\x97\xb0\x4d\xb9\xbc\xe9\x57\x09\xd4\xe5\x06\xbc\x07\x53\x12\xe3\x2f\xa6\xa5\x2f\x0b\x4a\x84\x52\x25\xf0\x7f\xac\xca\xe0\xa2\x32\x9f\x2a\x93\x08\x35\xfd\x9a\xab\x6d\x99\x1f\x44\x6b\x88\x79\x43\x7f\xb7\x23\x72\xea\x6d\x70\x1e\xe5\x4c\x14\x85\xa2\x44\x70\xb4\xe3\xd0\x1d\xc2\xe8\x24\x8d\x62\xf3\x07\x96\x49\x26\x48\x03\x6a\x6f\x09\x1d\x94\x26\xc0\x52\x54\xe2\x94\x58\x14\x1e\x41\x28\xd6\x9f\x12\xf0\x2b\x39\xff\x16\x7c\x2d\x64\x41\x6b\x4c\xd0\x39\x61\xcb\x29\x1c\x81\x22\xe7\xc1\xa4\x90\x06\xa5\x22\xfa\x91\x75\xdd\xb3\xc6\x67\xe6\x6e\x7f\x67\x16\x4c\x8e\x8c\x7f\x58\x94\x21\xc1\xb8\xae\x43\x3e\x47\xcb\x1e\xbb\x6a\x5b\x58\x93\x17\xde\xd5\x72\x1a\x93\xec\x32\x13\x94\x04\xd4\x92\x15\x74\x2a\x8a\x62\x74\x96\xc6\x71\xb5\x9f\x84\x7b\x26\x16\xc6\x25\xb7\xe7\x5b\x58\x2b\xca\xa7\xa9\x99\xbe\x70\x3c\x86\x50\xad\x0a\x5e\x9d\xbc\x8f\xaa\xb9\x1a\x05\xd8\x7f\xaf\x6e\x42\x21\x59\x25\xe1\x6f\x13\x20\x11\x1a\x52\xd2\xb2\x2a\x9b\x39\x57\x91\xc8\x49\x77\x47\x89\x35\x96\x55\xf4\xfc\x66\x54\xdb\x6a\xb1\x79\x75\x0b\xdc\x63\x32\xb7\xe1\xf3\xb6\x1d\xda\xa0\x67\x4d\x13\xde\x4d\xee\x0d\x5d\xb1\xea\x71\x91\x6b\x4d\x6e\x44\xc2\x3c\x65\x3a\x4b\x1e\x62\x84\x5a\x6f\x6d\x36\x68\xe8\x6f\xfe\xfc\x4d\x0e\xf5\x82\xac\xd1\x39\x6a\x3f\x5b\x08\x4b\x3c\x89\x8c\xe9\x75\xeb\xc0\xcd\x52\xa3\x24\xda\xa1\xd9\x7a\xd0\x43\xc3\x92\xcc\x38\xff\x92\xdb\xe4\x8e\x50\x1f\xca\xef\x23\x90\x64\x31\xf1\xc6\x96\x5c\x05\x5e\x54\x04\x15\x4a\x6d\xab\x90\x7a\xaa\xaa\x08\xcd\x63\xd5\x95\x0b\xb1\x83\x32\x91\x3d\x56\x72\x4c\x12\xc5\x81\x0d\xfa\xb8\x5f\x5c\x70\xbe\xee\x2e\x17\x25\x68\x44\x59\xfb\x75\x99\xb0\x28\x61\x8e\x29\xdf\x34\xe6\x98\x98\x9c\x0f\xb5\x20\x47\x73\x55\x5f\x3d\xc8\x41\x15\xff\x5e\x1b\xf3\x60\xe1\x3e\x46\x6b\x3b\x0e\x61\xe5\x70\x75\x3d\x58\xcb\x03\x04\x2d\xd1\xc2\x32\xa3\x24\xeb\x6b\x72\x62\xb8\x45\x47\xc7\x7b\x44\xa7\x4f\xae\xc7\xc0\xb2\x9a\xee\x7b\xc3\x7d\xd3\x8a\xae\xce\x4f\x61\x49\x4a\x81\xd1\xaa\xe4\x02\xaa\xda\x90\x04\xaa\x46\x1d\xde\x9e\xc7\x09\xb6\xab\xb1\x1c\xc4\x39\x17\x3e\xc9\x58\x41\xb9\xba\x2a\x20\xbe\x97\x5e\x74\x13\xd0\x92\x09\xee\xdd\x63\xef\x66\x23\xbb\x50\xbc\x1a\x47\x9d\x10\xf0\xa1\xde\x1b\xde\xc1\xc5\x87\x53\xf2\x6d\x1d\x3f\x7f\x27\x6a\x71\x70\x37\x8a\x3c\xde\xbf\x91\xc4\x71\xeb\x05\x37\x92\xe1\x08\x1f\x4a\xce\xb3\xfa\xb2\xc5\x9c\xba\x93\x3c\x4e\x6e\x25\x4d\x9d\x04\xc7\xbc\x3b\x20\xef\xa2\xdd\x8e\x9b\xd8\x71\x23\x63\x6e\x5a\x9d\x76\xaf\x6a\xff\x74\x23\x75\xd0\x74\x13\x10\x28\xf2\x21\x25\xb4\x8d\x96\x35\x58\x35\x30\x76\xc6\xea\x63\xa1\x59\xde\x52\x13\xb4\xe4\x89\x5a\x19\xf3\x2f\x77\xc6\x5a\xd4\xee\xc1\x9e\xc7\x61\xf5\xb2\xb4\xcb\xe1\x4d\x40\x35\x2b\xac\x79\x26\xf1\xe2\x5c\x5d\xc4\x4d\xe1\xcc\x1a\x28\xf8\x02\xbc\x87\xa9\xb9\x13\x77\x3c\xc2\xeb\xd3\xaa\xe1\x08\x9f\x42\xab\xa2\xbb\x56\xa1\x3a\xd9\xbc\x9f\x42\xfd\x22\x16\xc6\x92\x47\x37\x8d\x1e\x5f\xbb\x3a\x75\x70\x7a\x80\x3e\x45\x88\xbe\x17\x55\x2a\x8c\xf3\x94\x3c\x97\x24\x75\xe7\xa9\xb3\x6a\xe7\xfd\x0f\x53\x2b\x08\x5e\xeb\x28\x35\x14\xdf\x37\x1d\xa4\x56\x99\x7d\xe8\x14\xd5\xaa\x95\x9c\xbf\x76\xa9\x5a\x61\xf5\x63\x8e\xda\xed\xb8\xff\xa6\x7d\xaa\x7e\xd5\xdb\xdd\x75\x7d\xfb\xe6\xff\x00\x00\x00\xff\xff\xbc\x5d\x2d\x4e\x18\x1f\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 7960, mode: os.FileMode(420), modTime: time.Unix(1503426059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": &bintree{amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

