// Code generated by go-bindata.
// sources:
// amanar_config_schema.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x4d\x6f\xdb\x38\x13\xbe\xe7\x57\x0c\x8c\xf7\x58\xb8\x78\x7b\xec\x2d\x48\xf7\x23\xdd\xec\x36\x6d\x92\x02\x8b\x45\xe1\xd2\xe2\xc8\x9a\x2e\x45\x2a\xfc\x88\x6b\x14\xf9\xef\x8b\x21\x25\x5b\xb2\x14\xdb\x71\xb3\xae\xb3\x3d\xa4\x16\x35\x22\x39\xcf\xcc\xf3\xcc\x50\xfa\x76\x02\x30\x22\x8f\xa5\x1b\xbd\x06\xbe\x00\x18\x59\xbc\x0d\x64\x51\x8e\x5e\xc3\x5f\x71\x04\x60\x94\x19\x9d\xd3\x2c\x58\x31\x55\xe8\x46\x2f\x9a\xe1\x3b\x11\x94\x9f\x54\xc2\x17\xeb\x63\xd6\x28\x1c\xc5\xa1\x4f\xe9\xce\xc8\x2f\x2a\x1c\xbd\x86\x91\x99\x7e\xc1\xcc\xd7\xf6\x23\x21\x25\x79\x32\x5a\xa8\x4b\x6b\x2a\xb4\x9e\x90\xb7\x92\x0b\xe5\xb0\x36\xa9\xda\x37\xbe\x0d\x2c\xbd\x1a\x05\x18\x49\x74\x99\xa5\x8a\xe7\xe4\xd5\xae\x0b\x04\x36\x02\x8b\x95\x45\x87\xda\x93\x9e\x81\x2f\x10\xa4\xf0\xc2\x79\x63\x11\x48\xc7\x81\x8f\x3c\xe3\x18\xae\x0b\x72\x40\x0e\x18\x85\x3b\xa1\x50\x7b\xf0\x06\xfe\xf7\xf1\xf4\xe6\xe2\x7a\x72\x79\x7a\xfd\x6b\x63\x7f\x76\x71\x0e\x99\x29\x4b\xa1\x25\x7c\x8e\xdb\x01\x8b\x42\xb6\x4d\x5f\x66\x16\xa5\x7b\x59\x8f\x7c\x78\x77\xf1\xd3\xe7\xf1\x12\xa9\x16\x26\xce\x5b\xd2\xb3\xf6\x9d\x92\xf4\x05\xea\x59\xf4\xee\xff\xf5\xf0\xfd\x10\xc6\xdb\x9c\x67\xa3\xbe\xf3\x15\xda\x92\x9c\x23\xa3\x1d\xf8\x42\x78\x10\x16\xc1\x99\x30\x2b\xa2\xb7\x4b\x38\x56\x28\x6d\x01\x86\x7d\x3b\x02\x60\xba\x79\xda\xc1\x66\x30\xff\x76\xcc\xc1\x87\xf3\x30\xde\x21\xed\x51\x29\xfa\x32\x89\x68\x99\x60\xb3\x9e\x4d\x6b\x03\xc2\x5a\xb1\x68\xad\x3f\x14\xb9\x53\xa5\xcc\xdc\xc1\x79\x9a\xf8\x2d\xac\x26\x86\xe0\xd0\x6a\x51\xa2\x03\xc6\xb7\x12\xce\xcd\x8d\x95\x8e\x63\x31\x45\xc8\x0a\xa1\x67\x28\xc7\xf0\xbb\x71\x9e\x6d\xf3\xa0\x20\x37\x16\xde\x08\x2f\x7e\xb1\x54\xc5\xa7\x78\xba\xa9\x70\xe8\x60\x4e\xbe\x20\xbd\x5a\xe8\x46\x79\x2a\x85\xc7\xf1\xfa\x06\xbb\x22\x31\xe0\x56\x0f\xd7\x47\xa1\x5b\x1b\x0f\x68\x4f\x1b\xa4\x7a\xdb\x93\x10\x48\xf6\x56\xaa\x0d\x12\x4c\x93\x9c\x14\x26\x79\x58\x33\xfb\xd4\x5b\xf4\xc1\xc0\x6e\x9a\x75\xc8\x72\x83\xfc\x78\xd3\x0d\x26\xd4\x69\x02\x3c\x23\x73\x0b\xe3\x2f\xe6\x97\x5f\x54\x94\x09\xa5\x16\xc0\x7f\x31\x45\xeb\x2a\x99\x8f\x95\xc9\x84\x1a\x7f\x2d\xd5\x7a\x80\xd6\xa2\xd1\x23\x4e\xcb\x66\x88\x42\xab\x7f\xf7\x03\xb8\x7a\x1b\x9c\x47\x39\x11\x55\xa5\x28\x13\xec\xdd\x30\x56\x7d\x04\xce\xf3\xa8\x09\xbf\xe1\x22\x2b\x04\x69\x40\xed\x2d\xa1\x83\x85\x09\x30\x17\x49\x43\x32\x8b\xc2\x23\x08\xc5\x32\xb1\x00\xfc\x4a\xce\xbf\x00\x5f\xeb\x4d\xd0\x1a\x33\x74\x4e\xd8\xc5\x18\x4e\x41\x91\xf3\x60\x72\xc8\x83\x52\x11\xdb\x98\xfa\xed\x9d\xc5\x6b\x26\x50\x77\x65\xd6\x35\xf6\x83\x7f\x58\x94\x21\xc3\x78\x5f\x87\x72\x8a\x96\x67\x6c\x8b\x62\x65\x4d\x59\x79\x57\xab\x5e\x0c\xa1\x2b\x4c\x50\x12\x50\x4b\x16\xba\xb1\xa8\xaa\x07\x62\xf0\x10\x55\x76\x0f\xd1\xd6\x20\x0d\x86\xa9\xa7\x31\x3b\xc5\xb6\x4b\xaa\xdd\xd3\x7a\x25\x19\x37\xe7\x6f\xa2\xc4\x34\x55\x95\x67\xeb\xc4\x37\x54\x92\x25\x05\xfe\x34\x01\x32\xa1\x21\x27\x2d\x53\x78\xa7\x1c\x6d\x51\x92\x6e\x57\xe5\x5e\xae\x27\x92\xfc\x6b\x09\x7f\xb2\xe9\xba\x7d\xd5\x81\x6f\xa5\xfa\x36\xe8\xc9\xb2\xf0\x0c\x73\x63\x1f\xf1\x4f\x52\x1e\xb3\x79\x89\xaa\xc8\x98\x09\x4c\x18\xc9\xd5\x5c\xa8\xbe\x82\xdb\xa0\xa1\xbb\x9b\xa3\xd4\x72\xd4\x77\x64\x8d\x2e\x51\xfb\xc9\x9d\xb0\xc4\x15\x7b\x48\xd2\xfb\xe0\x4e\x72\xa3\x24\xda\x6e\xdb\xd9\x46\xb3\x49\xe8\xc2\x38\xff\xfd\xea\xbf\x65\x03\xbb\x11\xe6\x14\x24\x59\xcc\xbc\xb1\x0b\x0e\x8e\x17\x29\xe3\x85\x52\x9b\x02\x57\xd7\xf4\xc4\x10\x2e\xea\x37\x2e\xc4\xc2\xc0\xcc\xf0\x98\x74\x88\x24\x8a\x97\x36\xe8\xb3\x6e\xcc\xe1\x43\x7f\xba\x52\x2c\x40\x23\xca\x7a\x5e\x57\x08\x8b\x12\xa6\x98\x73\x17\x3c\xc5\xcc\x94\xbc\xa9\x3b\x72\x34\x55\x75\x5b\x4c\x0e\x92\xb7\x07\xad\x37\x83\xc9\xb1\xbb\x34\xb5\x1e\x87\xe6\xf1\xa6\x39\xed\xa1\x0c\x41\x4b\xb4\x30\x2f\x28\x2b\xba\x12\x96\x19\xae\x3c\x71\xe2\x03\xfa\xde\x4d\xdf\xdd\x9d\x6e\xfa\xc2\x4e\x5b\xb8\xd4\xe5\x9b\x0f\x17\x30\x27\xa5\xc0\x68\xb5\xe0\xe0\x27\x4d\x96\x40\xa9\x3e\xf3\x62\x5c\x03\xd9\xae\x46\x6a\x10\xc5\x52\xf8\xac\x60\x51\xe2\xcc\x48\x8e\x1f\x9d\x30\xdf\x06\xb4\x64\x82\x7b\xf5\xe4\xfd\xf8\x8e\x92\x1c\x0f\x4c\x91\x9d\x02\xde\xd7\x9b\x81\x57\x70\xf5\xfe\x82\xfc\x2a\xbf\x8e\x52\x96\x57\xd8\xb9\x5b\x45\x1e\xb7\xab\x6c\x6c\x1b\xbe\x5b\x65\x87\xd7\xdd\x2d\xfb\x2f\xeb\x06\x9b\x93\x76\x0d\x63\x8e\x41\x62\x76\x2b\x0e\x31\x3c\x0e\xc8\xbb\x68\xb7\xa5\xfb\x3e\x5b\xaa\x80\x1b\xa7\xbd\x1d\x54\x0a\xf7\x6d\xcf\x82\xa6\xdb\x80\x40\x31\x29\x73\x42\xbb\x94\x82\x25\x12\x4b\x90\x5a\x2d\xda\x99\xd0\xac\x0e\xb9\x09\x5a\x72\x77\xa6\x8c\xf9\x9b\x8b\x42\xad\x09\x5b\x52\xf8\xe9\x90\xd8\x93\xfa\x0e\x6f\x03\xaa\x49\x65\xcd\x8f\xe2\x3e\xa3\x7c\x15\x77\x01\x97\xd6\x40\xc5\xc7\x95\xe3\xec\xc0\x5a\x58\xc5\x5d\x1e\x8a\xea\xc3\xeb\x3e\x9e\xea\xf1\xe1\x15\xc1\x5b\xa0\x3f\x8e\xe0\x3f\x8b\x3b\x63\xc9\xa3\x1b\xc7\x19\x9f\x37\xb9\x5b\x28\xec\x41\xef\x08\xc0\xd1\x91\xba\x32\xce\x53\xf6\xc3\x18\xdd\xae\xe6\x97\x69\x2b\xcf\xa2\x94\x37\xb0\x1d\xb6\x90\x0f\xad\xfa\x84\x65\xbc\x09\xc0\xbe\x35\x7c\x45\x76\x39\x7d\xde\x4c\x6f\x90\xf8\x2f\x56\xf1\x02\x95\xda\x4c\xf7\x61\x46\x8b\x94\x02\xe9\x78\x3b\x43\x8d\xb6\x39\x26\x0b\x88\x93\x42\x7a\x2a\x7d\xf3\xa8\x0f\xe2\x0e\xf0\x6b\x65\xac\x77\x7c\xfe\x19\x3a\xf4\xb8\xf6\x91\x3d\xbe\x32\xc4\x79\x5b\x21\x7a\xec\xdf\xa8\x45\xc7\x20\x0d\xcd\x59\x71\xe3\x9b\x97\xe6\x0c\xb9\xd1\x88\xf1\x7e\x9a\xb7\xec\xcb\x99\x1e\xfb\x66\xbd\xc0\x6e\x6c\xeb\xf7\xb4\x9d\x0c\xf0\xe6\xa0\x4d\x7b\x1f\xdf\xdd\x9d\x8a\x67\x78\x93\x3f\x7c\x04\x8f\xb9\x5b\x3b\x59\x27\x66\x34\x6e\x16\x3d\xa4\xa3\xfd\x1c\x39\x80\xa3\xcd\xa2\xc7\x26\x5b\x5f\x9c\xd1\xfb\xa9\xd6\xdb\xab\x77\x7f\x0c\x4b\x57\x4b\x79\x1e\xf8\xf0\xf7\xfc\xd4\x67\x55\xcc\x8e\x57\x51\x56\x11\x39\x02\x39\x69\x01\xb6\x0f\xbd\xc8\x41\xfd\x15\xde\xa8\xf4\x7a\x30\x5d\x46\x67\x2b\x41\xb6\xce\xba\xe0\x50\x82\xe0\xf4\xea\xf7\x1b\xe4\x12\x24\x29\x3d\x8e\xa1\x63\x38\x59\xff\x95\xfe\xe7\xbf\x11\xc3\xf5\x6f\x61\xf7\x27\xff\x04\x00\x00\xff\xff\x20\x40\x47\x3c\xed\x22\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 8941, mode: os.FileMode(420), modTime: time.Unix(1536808005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": &bintree{amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

